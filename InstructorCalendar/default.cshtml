@using System.Web.WebPages;
@using InstructorCalendar;

@{
    Layout = "_Layout.cshtml";
    string schedule = "";
    string json = "";
    string[] lines = { };
    List<Course> courses = new List<Course>();
    List<ScheduledCourse> output = new List<ScheduledCourse>();

    if (IsPost)
    {
        schedule = Request["schedule"];
        string[] lineDelimiters = { Environment.NewLine };
        char tabDelimiter = '\t';
        lines = schedule.Split(lineDelimiters, StringSplitOptions.RemoveEmptyEntries);
        if (lines.Length > 0)
        {
            // Turn headings into keys for line details
            string[] headings = lines[0].Split(tabDelimiter);
            for (int index = 0; index < headings.Length; index++)
            {
                headings[index] = headings[index].Replace(" ", "");
            }

            // Create a Course object graph for each line
            Dictionary<string, string> lineDetails;
            for (int row = 1; row < lines.Length; row++)
            {
                lineDetails = new Dictionary<string, string>();
                string[] details = lines[row].Split(tabDelimiter);
                for (int col = 0; col < headings.Length; col++)
                {
                    lineDetails.Add(headings[col], details[col]);
                }
                Course course = new Course()
                {
                    ClassTitle = lineDetails["ClassTitle"],
                    Catalog = lineDetails["Catalog"],
                    Subject = lineDetails["Subject"]
                };
                course.Offerings.Add(new CourseOffering() { Section = lineDetails["Section"] });
                string time;
                time = lineDetails["StartTime"].ToLower();
                if (time.Length == 7)
                {
                    time = "0" + time;
                }
                var startTime = DateTime.ParseExact(time, "hh:mm tt", System.Globalization.CultureInfo.InvariantCulture).TimeOfDay;
                time = lineDetails["EndTime"].ToLower();
                if (time.Length == 7)
                {
                    time = "0" + time;
                }
                var endTime = DateTime.ParseExact(time, "hh:mm tt", System.Globalization.CultureInfo.InvariantCulture).TimeOfDay;
                List<DayOfWeek> meetingDays = new List<DayOfWeek>();
                string days = lineDetails["MeetingDays"];
                if (days.Contains("Mo"))
                {
                    meetingDays.Add(DayOfWeek.Monday);
                }
                if (days.Contains("Tu"))
                {
                    meetingDays.Add(DayOfWeek.Tuesday);
                }
                if (days.Contains("We"))
                {
                    meetingDays.Add(DayOfWeek.Wednesday);
                }
                if (days.Contains("Th"))
                {
                    meetingDays.Add(DayOfWeek.Thursday);
                }
                if (days.Contains("Fr"))
                {
                    meetingDays.Add(DayOfWeek.Friday);
                }
                if (days.Contains("Sa"))
                {
                    meetingDays.Add(DayOfWeek.Saturday);
                }
                if (days.Contains("Su"))
                {
                    meetingDays.Add(DayOfWeek.Sunday);
                }
                foreach (var day in meetingDays)
                {
                    course.Offerings[0].Rooms.Add(new ScheduledRoom() { StartTime = startTime, EndTime = endTime, MeetingDay = day, Room = lineDetails["Room"] });
                }

                if (courses.Any(x=>x.Catalog == course.Catalog && x.Subject == course.Subject))
                {
                    var existing = courses.First(x => x.Catalog == course.Catalog && x.Subject == course.Subject);
                    if (existing.Offerings.Any(x=>x.Section == course.Offerings[0].Section))
                    {
                        var offering = existing.Offerings.First(x => x.Section == course.Offerings[0].Section);
                        foreach(var item in course.Offerings[0].Rooms)
                        {
                            offering.Rooms.Add(item);
                        }
                    }
                    else
                    {
                        existing.Offerings.Add(course.Offerings[0]);
                    }
                }
                else
                {
                    courses.Add(course);
                }
            }

            // Consolodate the list of courses into a single Calendar graph
            var weekSchedule = from course in courses
                               from offering in course.Offerings
                               from room in offering.Rooms
                               select new ScheduledCourse()
                               {
                                   MeetingDay = room.MeetingDay,
                                   Start = room.StartTime,
                                   End = room.EndTime,
                                   RoomNumber = room.Room,
                                   CourseNumber = course.Subject + course.Catalog,
                                   CourseTitle = course.ClassTitle,
                                   Section = offering.Section
                               };
            weekSchedule = weekSchedule.OrderBy(s => s.MeetingDay);
            output = weekSchedule.ToList();
            DateTime startOfWeek = DateTime.Today.AddDays(-1 * (int)(DateTime.Today.DayOfWeek));
            var events = from item in output
                         select new
                         {
                             title = item.CourseNumber + " - " + item.Section + " - " + item.RoomNumber,
                             start = startOfWeek.AddDays((int)item.MeetingDay).Add(item.Start).ToString(),
                             end = startOfWeek.AddDays((int)item.MeetingDay).Add(item.End).ToString(),
                         };
            System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
            json = js.Serialize(events.ToArray());
        }
    }

}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h1>Instructor Calendar</h1>

            <form method="post">
                <label>Instructor Schedule (From Student Administration):</label>
                <br />
                <textarea name="schedule" class="form-control" rows="15">@schedule</textarea>
                <br />
                <button type="submit">Parse Schedule</button>
            </form>
            <hr />
            @if (IsPost)
            {
                <div ng-app="App">
                    <script>
                        var eventData = JSON.parse('@Html.Raw(json)');
                        console.log(eventData);
                        var app = angular.module('App', ['ui.calendar']);
                        app.controller('MyDataController', function ($scope) {
                            function reparsefunction() {
                                var events = [];
                                for (var i = 0; i < eventData.length; i++) {
                                    var startDate = new Date(eventData[i].start);
                                    var endDate = new Date(eventData[i].end);
                                    events.push({
                                        title: eventData[i].title,
                                        start: startDate,
                                        end: endDate
                                    });
                                }
                                return events;
                            };
                            $scope.eventInfo = [reparsefunction()];
                            $scope.uiConfig = {
                                calendar: {
                                    defaultView: 'agendaWeek',
                                    views: {
                                        agenda: {
                                            minTime: "08:00:00",
                                            maxTime: "18:00:00"
                                        }
                                    },
                                    editable: false,
                                    height: 570,
                                    editable: true,
                                    header:{
                                        //left: 'agendaWeek',
                                        left: 'month basicWeek basicDay agendaWeek agendaDay',
                                        center: 'title',
                                        right: 'today prev,next'
                                    }
                                }
                            };
                        });

                    </script>
                    <div ng-controller="MyDataController">
                        <div ui-calendar="uiConfig.calendar" ng-model="eventInfo" calendar="myCalendar"></div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
